2023-02-13 16:51:19,242 - mmseg - INFO - OpenCV num_threads is `16
2023-02-13 16:51:24,837 - mmseg - INFO - Environment info:
------------------------------------------------------------
sys.platform: win32
Python: 3.8.16 | packaged by conda-forge | (default, Feb  1 2023, 15:53:35) [MSC v.1929 64 bit (AMD64)]
CUDA available: True
GPU 0: NVIDIA GeForce RTX 3080 Ti
CUDA_HOME: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.3
NVCC: Cuda compilation tools, release 11.3, V11.3.58
MSVC: 用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.31.31105 版
GCC: n/a
PyTorch: 1.10.0
PyTorch compiling details: PyTorch built with:
  - C++ Version: 199711
  - MSVC 192829337
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)
  - OpenMP 2019
  - LAPACK is enabled (usually provided by MKL)
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.2
  - Magma 2.5.4
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=C:/cb/pytorch_1000000000000/work/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /w /bigobj -DUSE_PTHREADPOOL -openmp:experimental -IC:/cb/pytorch_1000000000000/work/mkl/include -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, 

TorchVision: 0.11.0
OpenCV: 4.7.0
MMCV: 1.7.1
MMCV Compiler: MSVC 192829924
MMCV CUDA Compiler: 11.3
MMSegmentation: 0.30.0+
------------------------------------------------------------

2023-02-13 16:51:24,838 - mmseg - INFO - Distributed training: False
2023-02-13 16:51:25,070 - mmseg - INFO - Config:
norm_cfg = dict(type='SyncBN', requires_grad=True)
model = dict(
    type='EncoderDecoder',
    pretrained='open-mmlab://resnet50_v1c',
    backbone=dict(
        type='ResNetV1c',
        depth=50,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        dilations=(1, 1, 2, 4),
        strides=(1, 2, 1, 1),
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        norm_eval=False,
        style='pytorch',
        contract_dilation=True),
    decode_head=dict(
        type='PSPHead',
        in_channels=2048,
        in_index=3,
        channels=512,
        pool_scales=(1, 2, 3, 6),
        dropout_ratio=0.1,
        num_classes=2,
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        align_corners=False,
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),
    auxiliary_head=dict(
        type='FCNHead',
        in_channels=1024,
        in_index=2,
        channels=256,
        num_convs=1,
        concat_input=False,
        dropout_ratio=0.1,
        num_classes=2,
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        align_corners=False,
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),
    train_cfg=dict(),
    test_cfg=dict(mode='whole'))
dataset_type = 'CustomDataset'
data_root = 'data/glomeruli'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
crop_size = (512, 512)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations'),
    dict(type='Resize', img_scale=(2048, 512), ratio_range=(0.5, 2.0)),
    dict(type='RandomCrop', crop_size=(512, 512), cat_max_ratio=0.75),
    dict(type='RandomFlip', prob=0.5),
    dict(type='PhotoMetricDistortion'),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_semantic_seg'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(2048, 512),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=8,
    workers_per_gpu=4,
    train=dict(
        type='CustomDataset',
        data_root='data/glomeruli',
        img_dir='images',
        ann_dir='masks',
        split='splits/train.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations'),
            dict(type='Resize', img_scale=(2048, 512), ratio_range=(0.5, 2.0)),
            dict(type='RandomCrop', crop_size=(512, 512), cat_max_ratio=0.75),
            dict(type='RandomFlip', prob=0.5),
            dict(type='PhotoMetricDistortion'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),
            dict(type='DefaultFormatBundle'),
            dict(type='Collect', keys=['img', 'gt_semantic_seg'])
        ],
        img_suffix='.png',
        classes=('background', 'glomeruli'),
        palette=[[128, 128, 128], [151, 189, 8]]),
    val=dict(
        type='CustomDataset',
        data_root='data/glomeruli',
        img_dir='images',
        ann_dir='masks',
        split='splits/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(2048, 512),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ],
        img_suffix='.png',
        classes=('background', 'glomeruli'),
        palette=[[128, 128, 128], [151, 189, 8]]),
    test=dict(
        type='CustomDataset',
        data_root='data/glomeruli',
        img_dir='images',
        ann_dir='masks',
        split='splits/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(2048, 512),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ],
        img_suffix='.png',
        classes=('background', 'glomeruli'),
        palette=[[128, 128, 128], [151, 189, 8]]))
log_config = dict(
    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = 'checkpoints/pspnet_r50-d8_512x1024_40k_cityscapes_20200605_003338-2966598c.pth'
resume_from = None
workflow = [('train', 1)]
cudnn_benchmark = True
optimizer = dict(type='SGD', lr=0.005, momentum=0.9, weight_decay=0.0005)
optimizer_config = dict()
lr_config = dict(policy='poly', power=0.9, min_lr=0.0001, by_epoch=False)
runner = dict(type='IterBasedRunner', max_iters=2000)
checkpoint_config = dict(by_epoch=False, interval=200)
evaluation = dict(interval=200, metric='mIoU', pre_eval=True)
img_dir = 'images'
ann_dir = 'masks'
classes = ('background', 'glomeruli')
palette = [[128, 128, 128], [151, 189, 8]]
suffix = '.png'
work_dir = 'work/pspnet'
gpu_ids = [0]
auto_resume = False

2023-02-13 16:51:25,072 - mmseg - INFO - Set random seed to 514799972, deterministic: False
2023-02-13 16:51:25,596 - mmseg - INFO - EncoderDecoder(
  (backbone): ResNetV1c(
    (stem): Sequential(
      (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (1): _BatchNormXd(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (4): _BatchNormXd(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace=True)
      (6): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): _BatchNormXd(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace=True)
    )
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): _BatchNormXd(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): _BatchNormXd(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): _BatchNormXd(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer2): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): _BatchNormXd(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): _BatchNormXd(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): _BatchNormXd(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): _BatchNormXd(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer3): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (5): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer4): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): _BatchNormXd(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
        (bn2): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
        (bn2): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
  )
  init_cfg={'type': 'Pretrained', 'checkpoint': 'open-mmlab://resnet50_v1c'}
  (decode_head): PSPHead(
    input_transform=None, ignore_index=255, align_corners=False
    (loss_decode): CrossEntropyLoss(avg_non_ignore=False)
    (conv_seg): Conv2d(512, 2, kernel_size=(1, 1), stride=(1, 1))
    (dropout): Dropout2d(p=0.1, inplace=False)
    (psp_modules): PPM(
      (0): Sequential(
        (0): AdaptiveAvgPool2d(output_size=1)
        (1): ConvModule(
          (conv): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
      )
      (1): Sequential(
        (0): AdaptiveAvgPool2d(output_size=2)
        (1): ConvModule(
          (conv): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
      )
      (2): Sequential(
        (0): AdaptiveAvgPool2d(output_size=3)
        (1): ConvModule(
          (conv): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
      )
      (3): Sequential(
        (0): AdaptiveAvgPool2d(output_size=6)
        (1): ConvModule(
          (conv): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
      )
    )
    (bottleneck): ConvModule(
      (conv): Conv2d(4096, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (activate): ReLU(inplace=True)
    )
  )
  init_cfg={'type': 'Normal', 'std': 0.01, 'override': {'name': 'conv_seg'}}
  (auxiliary_head): FCNHead(
    input_transform=None, ignore_index=255, align_corners=False
    (loss_decode): CrossEntropyLoss(avg_non_ignore=False)
    (conv_seg): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    (dropout): Dropout2d(p=0.1, inplace=False)
    (convs): Sequential(
      (0): ConvModule(
        (conv): Conv2d(1024, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace=True)
      )
    )
  )
  init_cfg={'type': 'Normal', 'std': 0.01, 'override': {'name': 'conv_seg'}}
)
2023-02-13 16:51:25,603 - mmseg - INFO - Loaded 2060 images
2023-02-13 16:51:26,327 - mmseg - INFO - Loaded 515 images
2023-02-13 16:51:26,327 - mmseg - INFO - load checkpoint from local path: checkpoints/pspnet_r50-d8_512x1024_40k_cityscapes_20200605_003338-2966598c.pth
2023-02-13 16:51:26,435 - mmseg - WARNING - The model and loaded state dict do not match exactly

size mismatch for decode_head.conv_seg.weight: copying a param with shape torch.Size([19, 512, 1, 1]) from checkpoint, the shape in current model is torch.Size([2, 512, 1, 1]).
size mismatch for decode_head.conv_seg.bias: copying a param with shape torch.Size([19]) from checkpoint, the shape in current model is torch.Size([2]).
size mismatch for auxiliary_head.conv_seg.weight: copying a param with shape torch.Size([19, 256, 1, 1]) from checkpoint, the shape in current model is torch.Size([2, 256, 1, 1]).
size mismatch for auxiliary_head.conv_seg.bias: copying a param with shape torch.Size([19]) from checkpoint, the shape in current model is torch.Size([2]).
2023-02-13 16:51:26,446 - mmseg - INFO - Start running, host: zlx@DESKTOP-HS1JKFI, work_dir: D:\code\mmsegmentation-master\work\pspnet
2023-02-13 16:51:26,446 - mmseg - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2023-02-13 16:51:26,446 - mmseg - INFO - workflow: [('train', 1)], max: 2000 iters
2023-02-13 16:51:26,447 - mmseg - INFO - Checkpoints will be saved to D:\code\mmsegmentation-master\work\pspnet by HardDiskBackend.
2023-02-13 16:53:01,084 - mmseg - INFO - Iter [50/2000]	lr: 4.892e-03, eta: 0:53:31, time: 1.647, data_time: 0.026, memory: 9820, decode.loss_ce: 0.1354, decode.acc_seg: 95.5570, aux.loss_ce: 0.0789, aux.acc_seg: 94.5044, loss: 0.2143
2023-02-13 16:53:37,328 - mmseg - INFO - Iter [100/2000]	lr: 4.781e-03, eta: 0:37:32, time: 0.724, data_time: 0.014, memory: 9820, decode.loss_ce: 0.0456, decode.acc_seg: 98.7008, aux.loss_ce: 0.0225, aux.acc_seg: 98.7008, loss: 0.0681
2023-02-13 16:54:13,006 - mmseg - INFO - Iter [150/2000]	lr: 4.670e-03, eta: 0:31:43, time: 0.715, data_time: 0.015, memory: 9820, decode.loss_ce: 0.0582, decode.acc_seg: 97.8439, aux.loss_ce: 0.0279, aux.acc_seg: 97.8439, loss: 0.0862
2023-02-13 16:54:46,965 - mmseg - INFO - Saving checkpoint at 200 iterations
2023-02-13 16:54:50,801 - mmseg - INFO - Iter [200/2000]	lr: 4.559e-03, eta: 0:28:53, time: 0.766, data_time: 0.014, memory: 9820, decode.loss_ce: 0.0472, decode.acc_seg: 97.9382, aux.loss_ce: 0.0238, aux.acc_seg: 97.9382, loss: 0.0710
2023-02-13 16:55:48,905 - mmseg - INFO - per class results:
2023-02-13 16:55:48,906 - mmseg - INFO - 
+------------+------+-------+
|   Class    | IoU  |  Acc  |
+------------+------+-------+
| background | 98.1 | 100.0 |
| glomeruli  | 0.0  |  0.0  |
+------------+------+-------+
2023-02-13 16:55:48,906 - mmseg - INFO - Summary:
2023-02-13 16:55:48,906 - mmseg - INFO - 
+------+-------+------+
| aAcc |  mIoU | mAcc |
+------+-------+------+
| 98.1 | 49.05 | 50.0 |
+------+-------+------+
2023-02-13 16:55:48,906 - mmseg - INFO - Iter(val) [515]	aAcc: 0.9810, mIoU: 0.4905, mAcc: 0.5000, IoU.background: 0.9810, IoU.glomeruli: 0.0000, Acc.background: 1.0000, Acc.glomeruli: 0.0000
2023-02-13 16:56:23,967 - mmseg - INFO - Iter [250/2000]	lr: 4.447e-03, eta: 0:33:16, time: 1.853, data_time: 1.166, memory: 9820, decode.loss_ce: 0.0442, decode.acc_seg: 97.7540, aux.loss_ce: 0.0223, aux.acc_seg: 97.7538, loss: 0.0665
2023-02-13 16:57:01,379 - mmseg - INFO - Iter [300/2000]	lr: 4.335e-03, eta: 0:30:28, time: 0.748, data_time: 0.069, memory: 9820, decode.loss_ce: 0.0356, decode.acc_seg: 98.3937, aux.loss_ce: 0.0192, aux.acc_seg: 98.0200, loss: 0.0547
2023-02-13 16:57:35,641 - mmseg - INFO - Iter [350/2000]	lr: 4.223e-03, eta: 0:28:02, time: 0.685, data_time: 0.014, memory: 9820, decode.loss_ce: 0.0417, decode.acc_seg: 98.3778, aux.loss_ce: 0.0199, aux.acc_seg: 97.9933, loss: 0.0616
2023-02-13 16:58:09,546 - mmseg - INFO - Saving checkpoint at 400 iterations
2023-02-13 16:58:13,504 - mmseg - INFO - Iter [400/2000]	lr: 4.111e-03, eta: 0:26:21, time: 0.767, data_time: 0.014, memory: 9820, decode.loss_ce: 0.0434, decode.acc_seg: 98.2792, aux.loss_ce: 0.0223, aux.acc_seg: 97.4953, loss: 0.0657
2023-02-13 16:58:58,173 - mmseg - INFO - per class results:
2023-02-13 16:58:58,174 - mmseg - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 98.16 | 100.0 |
| glomeruli  |  3.03 |  3.03 |
+------------+-------+-------+
2023-02-13 16:58:58,174 - mmseg - INFO - Summary:
2023-02-13 16:58:58,174 - mmseg - INFO - 
+-------+------+-------+
|  aAcc | mIoU |  mAcc |
+-------+------+-------+
| 98.16 | 50.6 | 51.52 |
+-------+------+-------+
2023-02-13 16:58:58,174 - mmseg - INFO - Iter(val) [515]	aAcc: 0.9816, mIoU: 0.5060, mAcc: 0.5152, IoU.background: 0.9816, IoU.glomeruli: 0.0303, Acc.background: 1.0000, Acc.glomeruli: 0.0303
2023-02-13 16:59:33,227 - mmseg - INFO - Iter [450/2000]	lr: 3.998e-03, eta: 0:27:14, time: 1.585, data_time: 0.897, memory: 9820, decode.loss_ce: 0.0400, decode.acc_seg: 98.4202, aux.loss_ce: 0.0184, aux.acc_seg: 97.9762, loss: 0.0584
2023-02-13 17:00:07,724 - mmseg - INFO - Iter [500/2000]	lr: 3.885e-03, eta: 0:25:27, time: 0.690, data_time: 0.014, memory: 9820, decode.loss_ce: 0.0303, decode.acc_seg: 98.8416, aux.loss_ce: 0.0162, aux.acc_seg: 98.1533, loss: 0.0466
2023-02-13 17:00:45,152 - mmseg - INFO - Iter [550/2000]	lr: 3.771e-03, eta: 0:24:00, time: 0.749, data_time: 0.065, memory: 9820, decode.loss_ce: 0.0234, decode.acc_seg: 99.1268, aux.loss_ce: 0.0126, aux.acc_seg: 98.6548, loss: 0.0360
2023-02-13 17:01:19,256 - mmseg - INFO - Saving checkpoint at 600 iterations
2023-02-13 17:01:23,177 - mmseg - INFO - Iter [600/2000]	lr: 3.657e-03, eta: 0:22:44, time: 0.770, data_time: 0.013, memory: 9820, decode.loss_ce: 0.0323, decode.acc_seg: 98.7220, aux.loss_ce: 0.0190, aux.acc_seg: 97.6523, loss: 0.0513
2023-02-13 17:02:02,702 - mmseg - INFO - per class results:
2023-02-13 17:02:02,702 - mmseg - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 99.01 | 99.97 |
| glomeruli  | 49.15 | 49.99 |
+------------+-------+-------+
2023-02-13 17:02:02,702 - mmseg - INFO - Summary:
2023-02-13 17:02:02,703 - mmseg - INFO - 
+-------+-------+-------+
|  aAcc |  mIoU |  mAcc |
+-------+-------+-------+
| 99.02 | 74.08 | 74.98 |
+-------+-------+-------+
2023-02-13 17:02:02,703 - mmseg - INFO - Iter(val) [515]	aAcc: 0.9902, mIoU: 0.7408, mAcc: 0.7498, IoU.background: 0.9901, IoU.glomeruli: 0.4915, Acc.background: 0.9997, Acc.glomeruli: 0.4999
2023-02-13 17:02:37,880 - mmseg - INFO - Iter [650/2000]	lr: 3.542e-03, eta: 0:22:49, time: 1.484, data_time: 0.795, memory: 9820, decode.loss_ce: 0.0215, decode.acc_seg: 99.2250, aux.loss_ce: 0.0128, aux.acc_seg: 98.5238, loss: 0.0343
2023-02-13 17:03:12,551 - mmseg - INFO - Iter [700/2000]	lr: 3.428e-03, eta: 0:21:28, time: 0.693, data_time: 0.014, memory: 9820, decode.loss_ce: 0.0218, decode.acc_seg: 99.1694, aux.loss_ce: 0.0131, aux.acc_seg: 98.6552, loss: 0.0349
2023-02-13 17:03:47,307 - mmseg - INFO - Iter [750/2000]	lr: 3.312e-03, eta: 0:20:14, time: 0.695, data_time: 0.014, memory: 9820, decode.loss_ce: 0.0186, decode.acc_seg: 99.4062, aux.loss_ce: 0.0126, aux.acc_seg: 98.9310, loss: 0.0312
2023-02-13 17:04:24,327 - mmseg - INFO - Saving checkpoint at 800 iterations
2023-02-13 17:04:28,915 - mmseg - INFO - Iter [800/2000]	lr: 3.196e-03, eta: 0:19:16, time: 0.842, data_time: 0.064, memory: 9820, decode.loss_ce: 0.0194, decode.acc_seg: 99.1877, aux.loss_ce: 0.0121, aux.acc_seg: 98.7959, loss: 0.0315
2023-02-13 17:05:22,960 - mmseg - INFO - per class results:
2023-02-13 17:05:22,960 - mmseg - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background |  99.4 | 99.73 |
| glomeruli  | 72.64 | 82.82 |
+------------+-------+-------+
2023-02-13 17:05:22,960 - mmseg - INFO - Summary:
2023-02-13 17:05:22,960 - mmseg - INFO - 
+-------+-------+-------+
|  aAcc |  mIoU |  mAcc |
+-------+-------+-------+
| 99.41 | 86.02 | 91.28 |
+-------+-------+-------+
2023-02-13 17:05:22,961 - mmseg - INFO - Iter(val) [515]	aAcc: 0.9941, mIoU: 0.8602, mAcc: 0.9128, IoU.background: 0.9940, IoU.glomeruli: 0.7264, Acc.background: 0.9973, Acc.glomeruli: 0.8282
2023-02-13 17:05:58,123 - mmseg - INFO - Iter [850/2000]	lr: 3.080e-03, eta: 0:19:22, time: 1.774, data_time: 1.085, memory: 9820, decode.loss_ce: 0.0187, decode.acc_seg: 99.3109, aux.loss_ce: 0.0128, aux.acc_seg: 98.8498, loss: 0.0314
2023-02-13 17:06:32,698 - mmseg - INFO - Iter [900/2000]	lr: 2.963e-03, eta: 0:18:12, time: 0.691, data_time: 0.014, memory: 9820, decode.loss_ce: 0.0167, decode.acc_seg: 99.3880, aux.loss_ce: 0.0109, aux.acc_seg: 98.9861, loss: 0.0276
2023-02-13 17:07:07,293 - mmseg - INFO - Iter [950/2000]	lr: 2.846e-03, eta: 0:17:06, time: 0.692, data_time: 0.014, memory: 9820, decode.loss_ce: 0.0143, decode.acc_seg: 99.4769, aux.loss_ce: 0.0094, aux.acc_seg: 99.1732, loss: 0.0236
2023-02-13 17:07:41,649 - mmseg - INFO - Saving checkpoint at 1000 iterations
2023-02-13 17:07:45,475 - mmseg - INFO - Exp name: pspnet.py
2023-02-13 17:07:45,475 - mmseg - INFO - Iter [1000/2000]	lr: 2.728e-03, eta: 0:16:07, time: 0.773, data_time: 0.014, memory: 9820, decode.loss_ce: 0.0258, decode.acc_seg: 98.8895, aux.loss_ce: 0.0128, aux.acc_seg: 98.7075, loss: 0.0386
2023-02-13 17:08:31,213 - mmseg - INFO - per class results:
2023-02-13 17:08:31,213 - mmseg - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 99.46 | 99.83 |
| glomeruli  | 74.21 | 80.55 |
+------------+-------+-------+
2023-02-13 17:08:31,213 - mmseg - INFO - Summary:
2023-02-13 17:08:31,214 - mmseg - INFO - 
+-------+-------+-------+
|  aAcc |  mIoU |  mAcc |
+-------+-------+-------+
| 99.47 | 86.84 | 90.19 |
+-------+-------+-------+
2023-02-13 17:08:31,214 - mmseg - INFO - Exp name: pspnet.py
2023-02-13 17:08:31,214 - mmseg - INFO - Iter(val) [515]	aAcc: 0.9947, mIoU: 0.8684, mAcc: 0.9019, IoU.background: 0.9946, IoU.glomeruli: 0.7421, Acc.background: 0.9983, Acc.glomeruli: 0.8055
2023-02-13 17:09:09,635 - mmseg - INFO - Iter [1050/2000]	lr: 2.610e-03, eta: 0:15:50, time: 1.673, data_time: 0.974, memory: 9820, decode.loss_ce: 0.0198, decode.acc_seg: 99.2564, aux.loss_ce: 0.0145, aux.acc_seg: 98.5134, loss: 0.0342
2023-02-13 17:09:44,305 - mmseg - INFO - Iter [1100/2000]	lr: 2.491e-03, eta: 0:14:48, time: 0.693, data_time: 0.014, memory: 9820, decode.loss_ce: 0.0210, decode.acc_seg: 99.3441, aux.loss_ce: 0.0118, aux.acc_seg: 99.1112, loss: 0.0328
2023-02-13 17:10:18,719 - mmseg - INFO - Iter [1150/2000]	lr: 2.371e-03, eta: 0:13:47, time: 0.688, data_time: 0.014, memory: 9820, decode.loss_ce: 0.0116, decode.acc_seg: 99.5658, aux.loss_ce: 0.0077, aux.acc_seg: 99.3333, loss: 0.0193
2023-02-13 17:10:52,915 - mmseg - INFO - Saving checkpoint at 1200 iterations
2023-02-13 17:10:56,621 - mmseg - INFO - Iter [1200/2000]	lr: 2.250e-03, eta: 0:12:52, time: 0.768, data_time: 0.014, memory: 9820, decode.loss_ce: 0.0156, decode.acc_seg: 99.4349, aux.loss_ce: 0.0107, aux.acc_seg: 99.0786, loss: 0.0263
2023-02-13 17:11:35,405 - mmseg - INFO - per class results:
2023-02-13 17:11:35,406 - mmseg - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 99.52 | 99.78 |
| glomeruli  |  77.5 | 86.22 |
+------------+-------+-------+
2023-02-13 17:11:35,406 - mmseg - INFO - Summary:
2023-02-13 17:11:35,406 - mmseg - INFO - 
+-------+-------+------+
|  aAcc |  mIoU | mAcc |
+-------+-------+------+
| 99.52 | 88.51 | 93.0 |
+-------+-------+------+
2023-02-13 17:11:35,406 - mmseg - INFO - Iter(val) [515]	aAcc: 0.9952, mIoU: 0.8851, mAcc: 0.9300, IoU.background: 0.9952, IoU.glomeruli: 0.7750, Acc.background: 0.9978, Acc.glomeruli: 0.8622
2023-02-13 17:12:10,597 - mmseg - INFO - Iter [1250/2000]	lr: 2.129e-03, eta: 0:12:19, time: 1.470, data_time: 0.780, memory: 9820, decode.loss_ce: 0.0159, decode.acc_seg: 99.4156, aux.loss_ce: 0.0105, aux.acc_seg: 99.0819, loss: 0.0264
2023-02-13 17:12:48,346 - mmseg - INFO - Iter [1300/2000]	lr: 2.007e-03, eta: 0:11:23, time: 0.755, data_time: 0.067, memory: 9820, decode.loss_ce: 0.0213, decode.acc_seg: 99.1519, aux.loss_ce: 0.0118, aux.acc_seg: 98.8167, loss: 0.0332
2023-02-13 17:13:23,143 - mmseg - INFO - Iter [1350/2000]	lr: 1.884e-03, eta: 0:10:28, time: 0.696, data_time: 0.014, memory: 9820, decode.loss_ce: 0.0114, decode.acc_seg: 99.5915, aux.loss_ce: 0.0075, aux.acc_seg: 99.3905, loss: 0.0189
2023-02-13 17:13:57,372 - mmseg - INFO - Saving checkpoint at 1400 iterations
2023-02-13 17:14:01,008 - mmseg - INFO - Iter [1400/2000]	lr: 1.761e-03, eta: 0:09:35, time: 0.767, data_time: 0.014, memory: 9820, decode.loss_ce: 0.0124, decode.acc_seg: 99.5051, aux.loss_ce: 0.0091, aux.acc_seg: 99.1560, loss: 0.0215
2023-02-13 17:14:46,187 - mmseg - INFO - per class results:
2023-02-13 17:14:46,187 - mmseg - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 99.52 | 99.66 |
| glomeruli  | 79.01 | 92.91 |
+------------+-------+-------+
2023-02-13 17:14:46,187 - mmseg - INFO - Summary:
2023-02-13 17:14:46,188 - mmseg - INFO - 
+-------+-------+-------+
|  aAcc |  mIoU |  mAcc |
+-------+-------+-------+
| 99.53 | 89.27 | 96.28 |
+-------+-------+-------+
2023-02-13 17:14:46,188 - mmseg - INFO - Iter(val) [515]	aAcc: 0.9953, mIoU: 0.8927, mAcc: 0.9628, IoU.background: 0.9952, IoU.glomeruli: 0.7901, Acc.background: 0.9966, Acc.glomeruli: 0.9291
2023-02-13 17:15:21,390 - mmseg - INFO - Iter [1450/2000]	lr: 1.636e-03, eta: 0:08:59, time: 1.598, data_time: 0.908, memory: 9820, decode.loss_ce: 0.0108, decode.acc_seg: 99.6146, aux.loss_ce: 0.0077, aux.acc_seg: 99.3306, loss: 0.0184
2023-02-13 17:15:56,094 - mmseg - INFO - Iter [1500/2000]	lr: 1.510e-03, eta: 0:08:05, time: 0.694, data_time: 0.014, memory: 9820, decode.loss_ce: 0.0117, decode.acc_seg: 99.5116, aux.loss_ce: 0.0085, aux.acc_seg: 99.2107, loss: 0.0203
2023-02-13 17:16:33,787 - mmseg - INFO - Iter [1550/2000]	lr: 1.382e-03, eta: 0:07:14, time: 0.753, data_time: 0.067, memory: 9820, decode.loss_ce: 0.0131, decode.acc_seg: 99.5473, aux.loss_ce: 0.0085, aux.acc_seg: 99.3003, loss: 0.0216
2023-02-13 17:17:07,938 - mmseg - INFO - Saving checkpoint at 1600 iterations
2023-02-13 17:17:11,601 - mmseg - INFO - Iter [1600/2000]	lr: 1.254e-03, eta: 0:06:23, time: 0.766, data_time: 0.014, memory: 9820, decode.loss_ce: 0.0068, decode.acc_seg: 99.7599, aux.loss_ce: 0.0051, aux.acc_seg: 99.5850, loss: 0.0119
2023-02-13 17:17:50,482 - mmseg - INFO - per class results:
2023-02-13 17:17:50,482 - mmseg - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 99.54 | 99.88 |
| glomeruli  | 77.53 | 82.37 |
+------------+-------+-------+
2023-02-13 17:17:50,483 - mmseg - INFO - Summary:
2023-02-13 17:17:50,484 - mmseg - INFO - 
+-------+-------+-------+
|  aAcc |  mIoU |  mAcc |
+-------+-------+-------+
| 99.55 | 88.54 | 91.12 |
+-------+-------+-------+
2023-02-13 17:17:50,484 - mmseg - INFO - Iter(val) [515]	aAcc: 0.9955, mIoU: 0.8854, mAcc: 0.9112, IoU.background: 0.9954, IoU.glomeruli: 0.7753, Acc.background: 0.9988, Acc.glomeruli: 0.8237
2023-02-13 17:18:25,558 - mmseg - INFO - Iter [1650/2000]	lr: 1.123e-03, eta: 0:05:40, time: 1.469, data_time: 0.782, memory: 9820, decode.loss_ce: 0.0108, decode.acc_seg: 99.6272, aux.loss_ce: 0.0070, aux.acc_seg: 99.4065, loss: 0.0178
2023-02-13 17:18:59,920 - mmseg - INFO - Iter [1700/2000]	lr: 9.912e-04, eta: 0:04:49, time: 0.687, data_time: 0.014, memory: 9820, decode.loss_ce: 0.0123, decode.acc_seg: 99.5665, aux.loss_ce: 0.0087, aux.acc_seg: 99.2206, loss: 0.0210
2023-02-13 17:19:34,304 - mmseg - INFO - Iter [1750/2000]	lr: 8.568e-04, eta: 0:03:59, time: 0.687, data_time: 0.014, memory: 9820, decode.loss_ce: 0.0148, decode.acc_seg: 99.4948, aux.loss_ce: 0.0102, aux.acc_seg: 99.1005, loss: 0.0250
2023-02-13 17:20:10,880 - mmseg - INFO - Saving checkpoint at 1800 iterations
2023-02-13 17:20:14,775 - mmseg - INFO - Iter [1800/2000]	lr: 7.196e-04, eta: 0:03:10, time: 0.819, data_time: 0.064, memory: 9820, decode.loss_ce: 0.0075, decode.acc_seg: 99.7167, aux.loss_ce: 0.0054, aux.acc_seg: 99.6150, loss: 0.0129
2023-02-13 17:21:00,061 - mmseg - INFO - per class results:
2023-02-13 17:21:00,061 - mmseg - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 99.59 |  99.8 |
| glomeruli  | 80.97 | 89.34 |
+------------+-------+-------+
2023-02-13 17:21:00,061 - mmseg - INFO - Summary:
2023-02-13 17:21:00,062 - mmseg - INFO - 
+------+-------+-------+
| aAcc |  mIoU |  mAcc |
+------+-------+-------+
| 99.6 | 90.28 | 94.57 |
+------+-------+-------+
2023-02-13 17:21:00,062 - mmseg - INFO - Iter(val) [515]	aAcc: 0.9960, mIoU: 0.9028, mAcc: 0.9457, IoU.background: 0.9959, IoU.glomeruli: 0.8097, Acc.background: 0.9980, Acc.glomeruli: 0.8934
2023-02-13 17:21:35,241 - mmseg - INFO - Iter [1850/2000]	lr: 5.790e-04, eta: 0:02:25, time: 1.600, data_time: 0.910, memory: 9820, decode.loss_ce: 0.0105, decode.acc_seg: 99.5749, aux.loss_ce: 0.0080, aux.acc_seg: 99.3173, loss: 0.0185
2023-02-13 17:22:09,747 - mmseg - INFO - Iter [1900/2000]	lr: 4.335e-04, eta: 0:01:36, time: 0.690, data_time: 0.014, memory: 9820, decode.loss_ce: 0.0098, decode.acc_seg: 99.6102, aux.loss_ce: 0.0064, aux.acc_seg: 99.4805, loss: 0.0162
2023-02-13 17:22:44,511 - mmseg - INFO - Iter [1950/2000]	lr: 2.803e-04, eta: 0:00:47, time: 0.695, data_time: 0.014, memory: 9820, decode.loss_ce: 0.0105, decode.acc_seg: 99.6428, aux.loss_ce: 0.0079, aux.acc_seg: 99.3730, loss: 0.0184
2023-02-13 17:23:18,982 - mmseg - INFO - Saving checkpoint at 2000 iterations
2023-02-13 17:23:22,572 - mmseg - INFO - Exp name: pspnet.py
2023-02-13 17:23:22,572 - mmseg - INFO - Iter [2000/2000]	lr: 1.052e-04, eta: 0:00:00, time: 0.771, data_time: 0.014, memory: 9820, decode.loss_ce: 0.0093, decode.acc_seg: 99.6493, aux.loss_ce: 0.0064, aux.acc_seg: 99.4613, loss: 0.0157
2023-02-13 17:24:09,163 - mmseg - INFO - per class results:
2023-02-13 17:24:09,163 - mmseg - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 99.59 | 99.79 |
| glomeruli  | 81.04 | 90.04 |
+------------+-------+-------+
2023-02-13 17:24:09,163 - mmseg - INFO - Summary:
2023-02-13 17:24:09,164 - mmseg - INFO - 
+------+-------+-------+
| aAcc |  mIoU |  mAcc |
+------+-------+-------+
| 99.6 | 90.32 | 94.91 |
+------+-------+-------+
2023-02-13 17:24:09,164 - mmseg - INFO - Exp name: pspnet.py
2023-02-13 17:24:09,164 - mmseg - INFO - Iter(val) [515]	aAcc: 0.9960, mIoU: 0.9032, mAcc: 0.9491, IoU.background: 0.9959, IoU.glomeruli: 0.8104, Acc.background: 0.9979, Acc.glomeruli: 0.9004
